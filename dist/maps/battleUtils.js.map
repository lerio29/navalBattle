{"version":3,"sources":["battleUtils.ts"],"names":[],"mappings":";;AAGA,kCAAkC;AAElC;;;;GAIG;AACH;IAOC;;;;OAIG;IACH,MAAM,CAAC,yBAAyB,CAAC,QAAgB;QAEhD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,uBAAuB,CAAC,MAAc;QAE5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAE,CAAC,CAAE;IAC3C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,eAAe,CAAC,KAAkB;QACxC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;IACjF,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,oBAAoB,CAAC,GAAW,EAAE,IAAY;QACpD,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,aAAa,CAAC,KAAkB,EAAE,QAAgB;QACxD,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAK,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,QAAQ,IAAI,KAAK,CAAC,IAAI,GAAG,QAAS,CAAC,CAAA,CAAC;YACxF,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,iBAAiB,CAAC,MAAwB,EAAE,QAAgB;QAClE,GAAG,CAAA,CAAC,IAAI,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC,CAAA,CAAC;YAClC,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAK,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,QAAQ,IAAI,KAAK,CAAC,IAAI,GAAG,QAAS,CAAC,CAAA,CAAC;gBACxF,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,MAAM,CAAC,cAAc;QACpB,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;IACvF,CAAC;;AA5Ee,sBAAU,GAAW,GAAG,CAAC;AAEzB,qBAAS,GAAa,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;AAJjJ,kCAgFC","file":"../src/battleUtils.js","sourcesContent":["import {MatriceCase} from \"./matriceCase\";\nimport { Dictionary, Set }  from 'typescript-collections';\nimport {Ship} from \"./ship\";\nimport * as sha1 from 'sha1/sha1';\n\n/**\n * Tools class\n * @class <p>Tools class</p>\n * @author Vincent VILERIO\n */\nexport class BattleUtils {\n\n\tstatic readonly _separator :string = \"-\";\n\n\tstatic readonly _alphabet: string[] = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\n\t\n\t\n\t/**\n\t * @description [horizontalPositionToAlpha Convert a number into a horizontal alphaNumeric position]\n\t * @param  {number} position [A number position]\n\t * @return {string}          [A character representation of the horizontal position]\n\t */\n\tstatic horizontalPositionToAlpha(position: number) :string{\n\t\t\n\t\treturn this._alphabet[position-1];\n\t}\n\n\t/**\n\t * @description [alphaToVerticalPosition Convert a character into a horizontal number position]\n\t * @param  {string} letter [A character representation of the horizontal position]\n\t * @return {number}        [A number representation of the horizontal position]\n\t */\n\tstatic alphaToVerticalPosition(letter: string) :number{\n\t\t\n\t\treturn this._alphabet.indexOf(letter) +1 ;\n\t}\n\n\t/**\n\t * @description [generateKeyGrid Generate a key from a MatriceCase object]\n\t * @param  {MatriceCase} mCase [A matrix box object]\n\t * @return {string}            [The key generated]\n\t */\n\tstatic generateKeyGrid(mCase: MatriceCase) :string{\n\t\treturn this.horizontalPositionToAlpha(mCase.hor) + this._separator + mCase.vert;\n\t}\n\n\t/**\n\t * @description [generateKeyGridByVal Generate a key from vertical/horizontal values]\n\t * @param  {number} hor  [horizontal value]\n\t * @param  {number} vert [vertical value]\n\t * @return {string}      [The key generated]\n\t */\n\tstatic generateKeyGridByVal(hor: number, vert: number) :string{\n\t\treturn this.horizontalPositionToAlpha(hor) + this._separator + vert;\n\t}\n\n\t/**\n\t * @description [checkPosition Check the existence of a box]\n\t * @param  {MatriceCase} mCase    [Box to verify]\n\t * @param  {number}      gridSize [The matrix size]\n\t * @return {boolean}              [The Result]\n\t */\n\tstatic checkPosition(mCase :MatriceCase, gridSize :number) :boolean{\n\t\tif(mCase.vert <= 0  || mCase.hor <= 0 || mCase.hor > gridSize || mCase.vert > gridSize ){\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @description [checkPosition Check the existence of boxes]\n\t * @param  {Set<MatriceCase>} mCase    [Boxes to verify]\n\t * @param  {number}      gridSize [The matrix size]\n\t * @return {boolean}              [The Result]\n\t */\n\tstatic checkAllPositions(mCases :Set<MatriceCase>, gridSize :number) :boolean{\n\t\tfor(let mCase of mCases.toArray()){\n\t\t\tif(mCase.vert <= 0  || mCase.hor <= 0 || mCase.hor > gridSize || mCase.vert > gridSize ){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic createUniqueId():string{\n\t\treturn sha1('uid-' + Math.random().toString(36).substr(2, 16) + new Date().getTime());\n\t}\n\n}\n"]}