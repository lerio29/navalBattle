{"version":3,"sources":["party.ts"],"names":[],"mappings":";;AAEA,+CAA0C;AAC1C,6CAAwC;AACxC,+CAA0C;AAC1C,qCAAgC;AAChC,mEAA0D;AAG1D;;;GAGG;AACH;IASC;;;;;OAKG;IACH,YAAY,OAAc,EAAE,OAAe;QAbpC,YAAO,GAAY,IAAI,eAAM,EAAE,CAAC;QAG/B,eAAU,GAAY,SAAS,CAAC;QAChC,QAAG,GAAW,SAAS,CAAC;QAW/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,mCAAU,EAAiB,CAAC;QAChD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAC,OAAO,CAAC,CAAC;QAE5C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAEzE,CAAC;IAEF;;;;;;OAMG;IACF,GAAG,CAAC,UAAkB,EAAE,UAAkB,EAAE,GAAW,EAAE,IAAY;QAGnE,IAAI,aAAa,GAAe,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,yBAAW,CAAC,oBAAoB,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAEtH,EAAE,CAAA,CAAC,aAAa,KAAK,uBAAU,CAAC,YAAY,CAAC,CAAA,CAAC;YAC7C,MAAM,MAAM,GAAG,IAAI,yBAAW,CAAC,GAAG,EAAE,IAAI,EAAE,uBAAU,CAAC,WAAW,CAAC,CAAC;YAClE,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5C,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtC,iCAAiC;YACjC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAC,UAAU,CAAC,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAC,UAAU,CAAC,CAAC;YAElD,MAAM,CAAC,uBAAU,CAAC,WAAW,CAAC;QAE/B,CAAC;QAAA,IAAI,CAAA,CAAC;YAEL,EAAE,CAAA,CAAC,aAAa,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,yBAAW,CAAC,oBAAoB,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC,CAAC,KAAM,CAAC,CAAA,CAAC;gBACjH,MAAM,MAAM,GAAG,IAAI,yBAAW,CAAC,GAAG,EAAE,IAAI,EAAE,uBAAU,CAAC,UAAU,CAAC,CAAC;gBACjE,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC5C,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAEtC,iCAAiC;gBACjC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAC,UAAU,CAAC,CAAC;gBAClD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAC,UAAU,CAAC,CAAC;gBAElD,MAAM,CAAC,uBAAU,CAAC,UAAU,CAAC;YAC9B,CAAC;YAAA,IAAI,CAAA,CAAC;gBACL,MAAM,CAAC,uBAAU,CAAC,cAAc,CAAC;YAClC,CAAC;QAEF,CAAC;IAIH,CAAC;IAEF;;;OAGG;IACF,IAAI,KAAK;QACR,MAAM,CAAE,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CAGD;AAhFD,sBAgFC","file":"../src/party.js","sourcesContent":["import {Player} from \"./player\";\nimport {BattleMatrice} from \"./battleMatrice\"; \nimport {BattleUtils} from \"./battleUtils\";\nimport {EnumStatus} from \"./enumStatus\";\nimport {MatriceCase} from \"./matriceCase\"; \nimport {Logger} from \"./logger\";\nimport { Dictionary, Set }  from 'typescript-collections';\n\n\n/**\n * Create an Party object\n * @class <p>A Party</p>\n */\nexport class Party {\n\t\n\tpublic _logger :Logger  = new Logger();\n\n\tprivate _players :Dictionary<string,Player>;\n\tprivate _timestamp :number =  undefined;\n\tprivate _id :string = undefined;\n\n\n\t/**\n\t * [Party constructor]\n\t * @constructor \n\t * @param {Player} player1 [The first player]\n\t * @param {Player} player2 [The second player]\n\t */\n\tconstructor(player1:Player, player2 :Player){\n\n\t\tthis._timestamp = Date.now();\n\t\tthis._players = new Dictionary<string,Player>();\n\t\tthis._players.setValue(player1.uid,player1);\n\t\tthis._players.setValue(player2.uid,player2);\n\n\t\tthis._id = this._players.toString().trim() + this._timestamp.toString();\n\n\t}\n\n/**\n * @description [hit For to shoot on a enemy ship ]\n * @param {Player} fromPlayer [Player behind the shot]\n * @param {Player} intoPlayer [Player undergoing shooting]\n * @param {number} hor        [Horizontal target]\n * @param {number} vert       [Vertical targer]\n */\n\thit(fromPlayer :Player, intoPlayer :Player, hor :number, vert :number) :EnumStatus{\t\t \n\t\t \n\n\t\t let currentStatus :EnumStatus = intoPlayer.grid.getMatrice.getValue(BattleUtils.generateKeyGridByVal(hor,vert)).state;\n\n\t\t if(currentStatus === EnumStatus.STATUS_EMPTY){\n\t\t \tconst tmpBox = new MatriceCase(hor, vert, EnumStatus.STATUS_FAIL);\n\t\t \tfromPlayer.targetGrid.updateMatrice(tmpBox);\n\t\t \tintoPlayer.grid.updateMatrice(tmpBox);\n\n\t\t \t//update des joueurs de la partie\n\t\t \tthis._players.setValue(fromPlayer.uid,fromPlayer);\n\t\t \tthis._players.setValue(intoPlayer.uid,intoPlayer);\n\n\t\t \treturn EnumStatus.STATUS_FAIL;\n\n\t\t }else{\n\n\t\t \tif(currentStatus != fromPlayer.targetGrid.getMatrice.getValue(BattleUtils.generateKeyGridByVal(hor,vert)).state ){\n\t\t \t\tconst tmpBox = new MatriceCase(hor, vert, EnumStatus.STATUS_HIT);\n\t\t \t\tfromPlayer.targetGrid.updateMatrice(tmpBox);\n\t\t \t\tintoPlayer.grid.updateMatrice(tmpBox);\n\n\t\t \t\t//update des joueurs de la partie\n\t\t\t \tthis._players.setValue(fromPlayer.uid,fromPlayer);\n\t\t\t \tthis._players.setValue(intoPlayer.uid,intoPlayer);\n\n\t\t \t\treturn EnumStatus.STATUS_HIT;\n\t\t \t}else{\n\t\t \t\treturn EnumStatus.STATUS_ALREADY;\n\t\t \t}\n\t\t \t\n\t\t }\n\n\n\n\t}\n\n/**\n * [getId description]\n * @return {string} [description]\n */\n\tget getId() :string{\n\t\treturn  this._id;\n\t}\n\n\n}"]}