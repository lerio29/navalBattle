{"version":3,"sources":["party.ts"],"names":[],"mappings":"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","file":"../src/party.js","sourcesContent":["import {Player} from \"./player\";\nimport {BattleMatrice} from \"./battleMatrice\"; \nimport {BattleUtils} from \"./battleUtils\";\nimport {EnumStatus} from \"./enumStatus\";\nimport {EnumShip} from \"./enumShip\";\nimport {MatriceCase} from \"./matriceCase\"; \nimport {Logger} from \"./logger\";\nimport { Dictionary, Set }  from 'typescript-collections';\n\n\n/**\n * Create an Party object\n * @class <p>A Party</p>\n * @author Vincent VILERIO\n */\nexport class Party {\n\t\n\tpublic _logger :Logger  = new Logger();\n\n\tprivate _players :Dictionary<string,Player>;\n\tprivate _timestamp :number =  undefined;\n\tprivate _id :string = undefined;\n\n\n\t/**\n\t * [Party constructor]\n\t * @constructor \n\t * @param {Player} player1 [The first player]\n\t * @param {Player} player2 [The second player]\n\t */\n\tconstructor(player1:Player, player2 :Player){\n\n\t\tthis._timestamp = Date.now();\n\t\tthis._players = new Dictionary<string,Player>();\n\t\tthis._players.setValue(player1.uid,player1);\n\t\tthis._players.setValue(player2.uid,player2);\n\n\t\tthis._id = this._players.toString().trim() + this._timestamp.toString();\n\n\t}\n\n/**\n * @description [hit For to shoot on a enemy ship ]\n * @param {Player} fromPlayer [Player behind the shot]\n * @param {Player} intoPlayer [Player undergoing shooting]\n * @param {number} hor        [Horizontal target]\n * @param {number} vert       [Vertical targer]\n */\n\thit(fromPlayerUid :string, intoPlayerUid :string, hor :number, vert :number) :EnumStatus{\t\t \n\t\t \n\n\t\t let EnnemyStatus :EnumStatus = this._players.getValue(fromPlayerUid).targetGrid.getMatrice.getValue(BattleUtils.generateKeyGridByVal(hor,vert)).state;\n\t\t //verif si presence bateau\n\t\t let shipIsSet :EnumShip = this._players.getValue(intoPlayerUid).grid.checkShipIsSet(hor, vert);\n\n\t\t if(EnnemyStatus === EnumStatus.STATUS_EMPTY && typeof(shipIsSet) == \"undefined\"){\n\t\t \tconst tmpBox = new MatriceCase(hor, vert, EnumStatus.STATUS_FAIL);\n\t\t \tthis._players.getValue(fromPlayerUid).targetGrid.updateMatrice(tmpBox);\n\n\t\t \treturn EnumStatus.STATUS_FAIL;\n\t\t }else if(EnnemyStatus === EnumStatus.STATUS_EMPTY && typeof(shipIsSet) != \"undefined\"){\t\n\t\t \t// if(EnnemyStatus != this._players.getValue(fromPlayerUid).targetGrid.getMatrice.getValue(BattleUtils.generateKeyGridByVal(hor,vert)).state ){\n\t\t \t\tconst tmpBox = new MatriceCase(hor, vert, EnumStatus.STATUS_HIT);\n\t\t \t\tthis._players.getValue(fromPlayerUid).targetGrid.updateMatrice(tmpBox);\n\t\t \t\tthis._players.getValue(intoPlayerUid).grid.updateMatrice(tmpBox);\n\n\t\t \t\t//MAJ hit state\n\t\t \t\tthis._players.getValue(fromPlayerUid).targetGrid.updateShip(hor,vert);\n\t\t \t\tthis._players.getValue(intoPlayerUid).grid.updateShip(hor,vert);\n\t\t \t\t\n\n\t\t \t\tthis._players.getValue(intoPlayerUid).grid.getShips\n\t\t \t\t\n\t\t \t\treturn EnumStatus.STATUS_HIT;\n\n\t\t \t// }\n\n\t\t }else if(EnnemyStatus !== EnumStatus.STATUS_EMPTY){\n\n\t\t \treturn EnumStatus.STATUS_ALREADY;\n\n\t\t }\n\n\n\n\t}\n\n\t/**\n\t * [getId description]\n\t * @return {string} [description]\n\t */\n\tget getId() :string{\n\t\treturn  this._id;\n\t}\n\n\tget getPlayers() :Dictionary<string,Player> {\n\t\treturn this._players;\n\t}\n\n\n}"]}