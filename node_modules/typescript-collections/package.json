{
  "_args": [
    [
      {
        "raw": "typescript-collections@^1.2.3",
        "scope": null,
        "escapedName": "typescript-collections",
        "name": "typescript-collections",
        "rawSpec": "^1.2.3",
        "spec": ">=1.2.3 <2.0.0",
        "type": "range"
      },
      "/home/vincent/dev/navalBattle"
    ]
  ],
  "_from": "typescript-collections@>=1.2.3 <2.0.0",
  "_id": "typescript-collections@1.2.3",
  "_inCache": true,
  "_location": "/typescript-collections",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/typescript-collections-1.2.3.tgz_1475574698204_0.24177894764579833"
  },
  "_npmUser": {
    "name": "episage",
    "email": "tilosag@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typescript-collections@^1.2.3",
    "scope": null,
    "escapedName": "typescript-collections",
    "name": "typescript-collections",
    "rawSpec": "^1.2.3",
    "spec": ">=1.2.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/typescript-collections/-/typescript-collections-1.2.3.tgz",
  "_shasum": "ef7f1bf3392a662c2c00e8c2c03381a001e02955",
  "_shrinkwrap": null,
  "_spec": "typescript-collections@^1.2.3",
  "_where": "/home/vincent/dev/navalBattle",
  "author": {
    "name": "Basarat Ali Syed",
    "email": "bas@basarat.com",
    "url": "http://basarat.com"
  },
  "bugs": {
    "url": "https://github.com/basarat/typescript-collections/issues"
  },
  "contributors": [
    {
      "name": "Tomasz Ciborski",
      "email": "episage"
    }
  ],
  "dependencies": {},
  "description": "A complete, fully tested data structure library written in TypeScript.",
  "devDependencies": {
    "assert": "^1.4.1",
    "browserify": "^13.1.0",
    "browserify-umdify": "^1.0.3",
    "chai": "^3.5.0",
    "glob": "^7.0.6",
    "istanbul": "^0.4.5",
    "jasmine": "^2.5.1",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.1.1",
    "karma-mocha-reporter": "^2.1.0",
    "mkdirp": "^0.5.1",
    "mocha": "^3.0.2",
    "rimraf": "^2.5.4",
    "source-map-support": "^0.4.2",
    "tslint": "^3.15.1",
    "typescript": "^1.8.10",
    "typings": "^1.3.3",
    "uglify-js": "^2.7.3",
    "util": "^0.10.3"
  },
  "directories": {},
  "dist": {
    "shasum": "ef7f1bf3392a662c2c00e8c2c03381a001e02955",
    "tarball": "https://registry.npmjs.org/typescript-collections/-/typescript-collections-1.2.3.tgz"
  },
  "gitHead": "9d89c1ba01ce458e7b0f80211313e3320c70c846",
  "homepage": "https://github.com/basarat/typescript-collections",
  "jsnext:main": "dist/lib/index.js",
  "keywords": [
    "typescript",
    "generics",
    "data",
    "structures",
    "collections",
    "linked",
    "list",
    "dictionary",
    "default",
    "dictionary",
    "multi",
    "dictionary",
    "binary",
    "search",
    "tree",
    "stack",
    "queue",
    "set",
    "bag",
    "binary",
    "heap",
    "priority",
    "queue",
    "array"
  ],
  "license": "MIT",
  "main": "./dist/lib/umd.js",
  "maintainers": [
    {
      "name": "basarat",
      "email": "basaratali@gmail.com"
    },
    {
      "name": "episage",
      "email": "tilosag@gmail.com"
    },
    {
      "name": "nsamala",
      "email": "nishanth.samala@gmail.com"
    }
  ],
  "name": "typescript-collections",
  "optionalDependencies": {},
  "readme": "[TypeScript Collections](https://github.com/basarat/typescript-collections/)\n====================\n\nIt is a complete, fully tested data structure library written in TypeScript.\n\nThis project uses TypeScript Generics so you need TS 0.9 and above.\n\n[This projects supports UMD (Universal Module Definition)](https://github.com/umdjs/umd)\n\n![typescript-collections downloads](https://nodei.co/npm-dl/typescript-collections.png)\n\nIncluded data structures\n---------------------\n\n- Linked List\n- Dictionary - [Example](#a-sample-on-dictionary)\n- Multi Dictionary\n- Linked Dictionary\n- Default Dictionary - [Info](#default-dictionary)\n- Binary Search Tree\n- Multi Root Tree - [Info](#multi-root-tree)\n- Stack\n- Queue\n- Set - [Example](#example)\n- Bag\n- Binary Heap\n- Priority Queue\n\nIt also includes several functions for manipulating arrays.\n\nUsage\n--------------------\n\n`npm install typescript-collections --save`\n\nES6 `import ... from`\n\n```typescript\nimport * as Collections from 'typescript-collections';\n```\n\nor TypeScript `import ... require`\n\n```typescript\nimport Collections = require('typescript-collections');\n```\n\nor JavaScript `var ... require`\n\n```js\nvar Collections = require('typescript-collections');\n```\n\n![](https://zippy.gfycat.com/SeriousPointlessCob.gif)\n\nVisual Studio or other TypeScript IDE, will provide you with complete Intellisense (autocomplete) for your types.\nThe compiler will ensure that the collections contain the correct elements.\n\nA sample Visual Studio project is in the demo folder.\n\nAlso available on NuGet : <http://www.nuget.org/packages/typescript.collections/>\nThanks to <https://github.com/georgiosd>\n\nExample\n--------------------\n\n```typescript\nimport * as Collections from 'typescript-collections';\n\nvar mySet = new Collections.Set<number>();\nmySet.add(123);\nmySet.add(123); // Duplicates not allowed in a set\n// The following will give error due to wrong type:\n// mySet.add(\"asdf\"); // Can only add numbers since that is the type argument.\n\nvar myQueue = new Collections.Queue();\nmyQueue.enqueue(1);\nmyQueue.enqueue(2);\n\nconsole.log(myQueue.dequeue()); // prints 1\nconsole.log(myQueue.dequeue()); // prints 2\n```\n\nTypings resolution\n-------------------\n\nRemember to set `\"moduleResolution\": \"node\"`, so TypeScript compiler can resolve typings in the `node_modules/typescript-collections` directory.\n\n![](http://i30.photobucket.com/albums/c316/Tilosag/Screen%20Shot%202016-04-08%20at%2015.55.30.png)\n\nIn browser usage\n-------------------\n\nYou should include `umd.js` or `umd.min.js` from `dist/lib/` directory.\n\n```html\n<script src=\"[server public path]/typescript-collections/dist/lib/umd.min.js\"></script>\n```\n\nA note on Equality\n-------------------\n\nEquality is important for hashing (e.g. dictionary / sets). Javascript only allows strings to be keys for the base dictionary {}.\nThis is why the implementation for these data structures uses the item's toString() method.\n\nmakeString utility function (aka. JSON.stringify)\n-------------------\n\nA simple function is provided for you when you need a quick toString that uses all properties. E.g:\n\n```typescript\nimport * as Collections from 'typescript-collections';\n\nclass Car {\n    constructor(public company: string, public type: string, public year: number) {\n    }\n    toString() {\n        // Short hand. Adds each own property\n        return Collections.util.makeString(this);\n    }\n}\n\nconsole.log(new Car(\"BMW\", \"A\", 2016).toString());\n```\n\nOutput:\n\n```text\n{company:BMW,type:A,year:2016}\n```\n\nA Sample on Dictionary\n---------------------\n\n```typescript\nimport * as Collections from 'typescript-collections';\n\nclass Person {\n    constructor(public name: string, public yearOfBirth: number,public city?:string) {\n    }\n    toString() {\n        return this.name + \"-\" + this.yearOfBirth; // City is not a part of the key.\n    }\n}\n\nclass Car {\n    constructor(public company: string, public type: string, public year: number) {\n    }\n    toString() {\n        // Short hand. Adds each own property\n        return Collections.util.makeString(this);\n    }\n}\nvar dict = new Collections.Dictionary<Person, Car>();\ndict.setValue(new Person(\"john\", 1970,\"melbourne\"), new Car(\"honda\", \"city\", 2002));\ndict.setValue(new Person(\"gavin\", 1984), new Car(\"ferrari\", \"F50\", 2006));\nconsole.log(\"Orig\");\nconsole.log(dict);\n\n// Changes the same john, since city is not part of key\ndict.setValue(new Person(\"john\", 1970, \"sydney\"), new Car(\"honda\", \"accord\", 2006));\n// Add a new john\ndict.setValue(new Person(\"john\", 1971), new Car(\"nissan\", \"micra\", 2010));\nconsole.log(\"Updated\");\nconsole.log(dict);\n\n// Showing getting / setting a single car:\nconsole.log(\"Single Item\");\nvar person = new Person(\"john\", 1970);\nconsole.log(\"-Person:\");\nconsole.log(person);\n\nvar car = dict.getValue(person);\nconsole.log(\"-Car:\");\nconsole.log(car.toString());\n```\n\nOutput:\n\n```text\nOrig\n{\n    john-1970 : {company:honda,type:city,year:2002}\n    gavin-1984 : {company:ferrari,type:F50,year:2006}\n}\nUpdated\n{\n    john-1970 : {company:honda,type:accord,year:2006}\n    gavin-1984 : {company:ferrari,type:F50,year:2006}\n    john-1971 : {company:nissan,type:micra,year:2010}\n}\nSingle Item\n-Person:\njohn-1970\n-Car:\n{company:honda,type:accord,year:2006}\n```\n\nDefault Dictionary\n---------------------\n\nAlso known as `Factory Dictionary` [[ref.](https://github.com/basarat/typescript-collections/pull/47)]\n\nIf a key doesn't exist, the Default Dictionary automatically creates it with `setDefault(defaultValue)`.\n\nDefault Dictionary is a @michaelneu contribution which copies Python's [defaultDict](https://docs.python.org/2/library/collections.html#collections.defaultdict).\n\nMulti Root Tree\n---------------------\n\nIt's a [forest](https://en.wikipedia.org/wiki/Tree_(graph_theory)#Forest) like data structure which must consist of unique keys. It exposes advanced node manipulation methods.\n\n```javascript\nimport * as Collections from 'typescript-collections';\n\nlet tree = new Collections.MultiRootTree();\ntree.insertIdIntoRoot('1');\n```\n\n```text\n{\n    rootIds: ['1']\n    nodes: { '1': [] }\n}\n```\n\nWhere `rootIds` are tree roots and `nodes` contains keys in order and describe keys nesting.\n\nConstraints\n\n- inserted keys MUST be unique\n\nTree manipulation methods\n\n- insertIdIntoRoot(id: string, position?: number)\n- insertIdIntoNode(nodeKey: string, id: string, position?: number)\n- insertIdAfterId(belowId: string, insertId: string)\n- insertIdBeforeId(beforeId: string, insertId: string)\n- insertIdIntoId(insideId: string, insertId: string)\n- moveIdBeforeId(moveId: string, beforeId: string)\n- moveIdAfterId(moveId: string, afterId: string)\n- moveIdIntoId(moveId: string, insideId: string, atStart = true)\n- deleteId(id: string)\n- getRootIds() - get a copy of rootIds\n- getNodes() - get a copy of nodes\n\nToDos:\n\n- drop unique key constraint\n\nDevelopment and contrbutions\n--------------------\n\nInstall dependencies and tools\n`npm run install_tools`\n\nCompile, test and check coverage\n`npm run all`\n\nSupported platforms\n--------------------\n\n- Every desktop and mobile browser (including IE6)\n- Node.js\n\n```text\nIf it supports JavaScript, it probably supports this library.\n```\n\nContact\n--------------------\n\nbas AT basarat.com\n\nProject is based on the excellent original javascript version called [buckets](https://github.com/mauriciosantos/buckets)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/basarat/typescript-collections.git"
  },
  "scripts": {
    "all": "npm run build && npm run test && npm run cover",
    "build": "npm run clean && npm run lint && npm run tsc && npm run umd && npm run minify",
    "clean": "rimraf ./dist",
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha -- ./dist/test/*.js",
    "install_tools": "npm install && typings install",
    "lint": "tslint -c ./tslint.json ./src/**/*.ts",
    "minify": "node minify-umd.js",
    "publish_to_npm": "npm publish",
    "test": "mocha ./dist/test/*Test.js",
    "tsc": "tsc",
    "umd": "node browserify-umd.js"
  },
  "typings": "./dist/lib/index.d.ts",
  "version": "1.2.3"
}
